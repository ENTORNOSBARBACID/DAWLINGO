{
  "lecciones": [
    {
      "titulo": "Variables y Tipos de Datos",
      "contenido": "Las variables en Python son contenedores donde se almacenan datos que pueden cambiar durante la ejecución del programa. Una variable tiene un nombre (identificador) y un valor asignado.\n\nPython es un lenguaje de tipado dinámico, lo que significa que no es necesario declarar el tipo de una variable explícitamente; el intérprete detecta el tipo automáticamente según el valor asignado.\n\n### Tipos de datos básicos:\n\n- **int (enteros):** Números sin parte decimal, positivos o negativos. Ejemplo: `edad = 25`, `temperatura = -10`.\n- **float (flotantes):** Números con decimales. Ejemplo: `pi = 3.14159`, `precio = 19.99`.\n- **str (cadenas de texto):** Secuencias de caracteres encerrados en comillas simples (' ') o dobles (\" \"). Ejemplo: `nombre = 'Ana'`, `mensaje = \"Hola Mundo\"`.\n- **bool (booleanos):** Valores de verdad, solo pueden ser `True` o `False`. Se usan para decisiones lógicas.\n\n### Operaciones comunes con variables:\n- Puedes reasignar valores a las variables tantas veces como quieras.\n- Se puede usar la función `type()` para saber el tipo actual de una variable.\n\n### Reglas para nombrar variables:\n- El nombre debe comenzar con una letra o guion bajo (_).\n- Puede contener letras, números y guiones bajos.\n- No usar palabras reservadas del lenguaje (como `if`, `for`, `def`).\n- Deben ser descriptivas para mejorar la legibilidad, por ejemplo: `total_ventas` es mejor que `x`.\n\n### Ejemplos:\n```python\nnombre = 'Juan'\nedad = 30\naltura = 1.75\nactivo = True\nprint(type(nombre))  # <class 'str'>\n```\n\nEntender bien los tipos de datos es fundamental para manipular información correctamente y evitar errores durante la ejecución del programa."
    },
    {
      "titulo": "Operadores",
      "contenido": "Los operadores son símbolos que permiten realizar operaciones sobre uno o más operandos (variables o valores). Python ofrece distintos tipos de operadores para manipular datos:\n\n### 1. Operadores aritméticos\nPermiten realizar cálculos matemáticos básicos:\n- `+` Suma: `a + b`\n- `-` Resta: `a - b`\n- `*` Multiplicación: `a * b`\n- `/` División (resultado siempre float): `a / b`\n- `//` División entera (resultado truncado): `a // b`\n- `%` Módulo o resto: `a % b`\n- `**` Potencia: `a ** b`\n\n### 2. Operadores de comparación\nSirven para comparar valores y devuelven `True` o `False`:\n- `==` Igual a\n- `!=` Diferente de\n- `>` Mayor que\n- `<` Menor que\n- `>=` Mayor o igual que\n- `<=` Menor o igual que\n\n### 3. Operadores lógicos\nSe utilizan para combinar expresiones booleanas:\n- `and` (y): ambas condiciones deben ser verdaderas para devolver `True`.\n- `or` (o): devuelve `True` si al menos una condición es verdadera.\n- `not` (no): invierte el valor lógico.\n\n### Ejemplos prácticos:\n```python\nx = 10\ny = 5\nprint(x + y)  # 15\nprint(x > y)  # True\nprint(x < y or y == 5)  # True\nprint(not(x == y))  # True\n```\n\n### Importancia\nLos operadores son la base para construir condiciones, realizar cálculos y controlar el flujo del programa mediante estructuras como `if`, `while`, y `for`. Saber usarlos correctamente es crucial para programar con eficacia."
    },
    {
      "titulo": "Entrada y Salida de Datos",
      "contenido": "La interacción con el usuario es una parte fundamental de muchos programas. Python ofrece funciones sencillas para recibir datos del usuario y mostrar resultados.\n\n### Salida: `print()`\nLa función `print()` muestra información en la consola. Puede imprimir texto, variables o resultados de expresiones.\n\n- Se pueden imprimir múltiples valores separados por comas; Python los separa con espacios automáticamente.\n- También se puede usar formato con f-strings para mayor claridad:\n\n```python\nnombre = 'Lucía'\nedad = 28\nprint('Hola', nombre, 'tienes', edad, 'años.')\nprint(f'Hola {nombre}, tienes {edad} años.')\n```\n\n### Entrada: `input()`\nEsta función detiene la ejecución del programa esperando que el usuario escriba algo y presione Enter.\n\n- El valor introducido siempre se recibe como cadena de texto (`str`).\n- Si se espera otro tipo (como un número), hay que convertirlo explícitamente.\n\n```python\nnombre = input('¿Cómo te llamas? ')\nedad = int(input('¿Cuántos años tienes? '))\nprint(f'Hola {nombre}, el próximo año tendrás {edad + 1} años.')\n```\n\n### Buenas prácticas\n- Siempre mostrar un mensaje claro en el `input()` para que el usuario sepa qué debe escribir.\n- Validar que los datos ingresados sean correctos para evitar errores, por ejemplo comprobando que la edad sea un número positivo.\n\n### Ejemplo de validación sencilla:\n```python\nwhile True:\n    edad_str = input('Introduce tu edad: ')\n    if edad_str.isdigit():\n        edad = int(edad_str)\n        break\n    else:\n        print('Por favor, introduce un número válido.')\n```\n\nCon estas funciones básicas, puedes crear programas interactivos que respondan a las necesidades del usuario."
    },
    {
      "titulo": "Comentarios y Buenas Prácticas",
      "contenido": "Los comentarios son una herramienta fundamental para hacer que tu código sea comprensible, tanto para ti como para otras personas que lo lean o mantengan en el futuro.\n\n### Comentarios en Python\n- Se usan con el símbolo `#` para comentar una línea o una parte de ella.\n- El intérprete ignora todo lo que esté después del `#` en esa línea.\n\n```python\n# Esto es un comentario explicativo\nx = 10  # Variable que almacena la cantidad de elementos\n```\n\n### ¿Por qué usar comentarios?\n- Explicar la intención detrás de bloques complejos.\n- Dejar notas para futuras mejoras o correcciones.\n- Documentar funciones y módulos.\n\n### Buenas prácticas para escribir código limpio y mantenible:\n- **Nombres descriptivos:** Usa nombres claros y significativos para variables, funciones y clases.\n- **Indentación y estilo:** Python usa la indentación para definir bloques. Usa 4 espacios por nivel, no tabulaciones.\n- **Evita código duplicado:** Usa funciones o clases para reutilizar código.\n- **Escribe funciones pequeñas:** Cada función debe hacer una sola cosa bien.\n- **Sigue estándares:** La guía oficial PEP8 establece normas para que el código sea consistente.\n\n### Ejemplo de función bien comentada y clara:\n```python\ndef calcular_area_rectangulo(base, altura):\n    \"\"\"Calcula el área de un rectángulo dado su base y altura.\"\"\"\n    # Multiplicamos base por altura\n    area = base * altura\n    return area\n```\n\n### Herramientas para ayudar en la calidad del código:\n- Linters para verificar el estilo.\n- Documentación automática con docstrings.\n- Revisiones de código en equipo.\n\nUn código limpio no solo funciona, sino que facilita el aprendizaje, la colaboración y el mantenimiento a largo plazo."
    }
  ]
}
