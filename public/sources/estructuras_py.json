[
  {
    "id": 1,
    "titulo": "Condicionales if-else",
    "contenido": "Las estructuras condicionales permiten ejecutar diferentes bloques de código dependiendo de si se cumplen o no ciertas condiciones. Son fundamentales para tomar decisiones en nuestros programas.\n\n### Sintaxis básica:\n```python\nif condicion:\n    # código si la condición es verdadera\nelif otra_condicion:\n    # código si se cumple otra condición\nelse:\n    # código si ninguna condición es verdadera\n```\n\n### Operadores comunes en condiciones:\n- Comparación: `==`, `!=`, `<`, `>`, `<=`, `>=`\n- Lógicos: `and`, `or`, `not`\n\n### Ejemplo práctico:\n```python\nedad = int(input(\"¿Cuántos años tienes? \"))\nif edad >= 65:\n    print(\"Eres un adulto mayor\")\nelif edad >= 18:\n    print(\"Eres un adulto\")\nelif edad >= 13:\n    print(\"Eres un adolescente\")\nelse:\n    print(\"Eres un niño\")\n```\n\n### Condicionales anidadas:\nPuedes colocar un `if` dentro de otro para manejar casos más específicos.\n```python\nif temperatura > 30:\n    if humedad > 70:\n        print(\"Hace mucho calor y está húmedo\")\n    else:\n        print(\"Hace mucho calor pero no está húmedo\")\n```\n\n### Buenas prácticas:\n- Mantén el código indentado y claro.\n- No abuses de múltiples `elif` si puedes usar estructuras más limpias.\n- Usa comentarios para clarificar decisiones complejas."
  },
  {
    "id": 2,
    "titulo": "Bucles for",
    "contenido": "El bucle `for` permite repetir un bloque de código por cada elemento de una secuencia. Es ideal para recorrer listas, cadenas, rangos y otros iterables.\n\n### Sintaxis básica:\n```python\nfor variable in iterable:\n    # código a ejecutar\n```\n\n### Iterar con range():\n```python\nfor i in range(1, 6):\n    print(f\"Iteración número {i}\")\n```\n\n### Recorrer una lista:\n```python\nnombres = [\"Ana\", \"Luis\", \"Carlos\"]\nfor nombre in nombres:\n    print(f\"Hola {nombre}\")\n```\n\n### Enumerar elementos con índice:\n```python\nfor indice, valor in enumerate(nombres):\n    print(f\"Índice {indice}: {valor}\")\n```\n\n### Anidar bucles:\n```python\nfor i in range(3):\n    for j in range(2):\n        print(f\"i={i}, j={j}\")\n```\n\n### Uso de `else` con for:\n```python\nfor numero in range(3):\n    print(numero)\nelse:\n    print(\"El bucle terminó sin interrupciones\")\n```\n\nEl `for` es esencial para recorrer estructuras y automatizar tareas repetitivas."
  },
  {
    "id": 3,
    "titulo": "Bucles while",
    "contenido": "El bucle `while` permite repetir un bloque de código mientras se cumpla una condición. A diferencia del `for`, no se sabe cuántas veces se ejecutará.\n\n### Sintaxis básica:\n```python\nwhile condicion:\n    # código a ejecutar\n```\n\n### Ejemplo simple:\n```python\ncontador = 0\nwhile contador < 5:\n    print(\"Contador:\", contador)\n    contador += 1\n```\n\n### Validación con `while`:\n```python\nclave = \"python123\"\nintento = \"\"\nwhile intento != clave:\n    intento = input(\"Introduce la clave: \")\nprint(\"¡Acceso concedido!\")\n```\n\n### Cuidado con los bucles infinitos:\nAsegúrate de que la condición cambie dentro del bucle, o nunca terminará.\n```python\n# Ejemplo de bucle infinito (NO ejecutar)\n# while True:\n#     print(\"Esto nunca para\")\n```\n\n### Uso de `else` con while:\n```python\nnumero = 0\nwhile numero < 3:\n    print(numero)\n    numero += 1\nelse:\n    print(\"Bucle finalizado\")\n```\n\nEl `while` es muy útil para repetir tareas hasta que se cumpla una condición, como validaciones o menús interactivos."
  },
  {
    "id": 4,
    "titulo": "Control de flujo: break, continue y pass",
    "contenido": "Dentro de bucles, puedes modificar el flujo de ejecución usando instrucciones especiales:\n\n### `break` - Salir del bucle:\nDetiene el bucle inmediatamente, sin esperar a que se complete la iteración.\n```python\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)  # Imprime de 0 a 4\n```\n\n### `continue` - Saltar a la siguiente vuelta:\nEvita el resto del código en la iteración actual y pasa a la siguiente.\n```python\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i)  # Imprime 0, 1, 3, 4\n```\n\n### `pass` - No hacer nada (placeholder):\nSirve para escribir una estructura sin implementarla aún.\n```python\nfor i in range(3):\n    pass  # No hace nada\n```\n\n### En bucles `while`:\n```python\ncontador = 0\nwhile contador < 10:\n    contador += 1\n    if contador == 7:\n        continue\n    if contador == 9:\n        break\n    print(contador)\n```\n\nEstas instrucciones son clave para tener un mayor control sobre la lógica de repetición y reaccionar a ciertas condiciones durante la ejecución."
  },
  {
    "id": 5,
    "titulo": "Estructuras anidadas",
    "contenido": "Anidar estructuras significa colocar condicionales dentro de bucles, bucles dentro de condicionales o una combinación de ambos. Esto permite construir programas más complejos y con lógica detallada.\n\n### Ejemplo: condicional dentro de un bucle\n```python\nfor numero in range(1, 11):\n    if numero % 2 == 0:\n        print(f\"{numero} es par\")\n    else:\n        print(f\"{numero} es impar\")\n```\n\n### Bucle dentro de condicional:\n```python\nrespuesta = input(\"¿Quieres ver la cuenta regresiva? (s/n): \")\nif respuesta.lower() == \"s\":\n    for i in range(5, 0, -1):\n        print(i)\n    print(\"¡Despegue!\")\n```\n\n### Bucle dentro de bucle (matrices):\n```python\nmatriz = [[1, 2], [3, 4], [5, 6]]\nfor fila in matriz:\n    for elemento in fila:\n        print(elemento, end=\" \")\n    print()\n```\n\n### Condicional dentro de `while`:\n```python\nnumero = 0\nwhile numero <= 10:\n    if numero % 3 == 0:\n        print(f\"{numero} es múltiplo de 3\")\n    numero += 1\n```\n\nLas estructuras anidadas son poderosas, pero deben usarse con cuidado para no crear código difícil de leer. Siempre usa una indentación clara y, si es posible, divide en funciones para mantener la legibilidad."
  }
]
